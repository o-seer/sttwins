{"version":3,"sources":["components/MapLink.tsx","components/SearchBar.tsx","components/results/ResultsBlock.tsx","components/results/index.tsx","data/index.ts","components/Main.tsx","index.tsx"],"names":["MapLink","className","href","target","SearchBar","queryUpdated","setQueryValue","useCallback","debounce","query","type","placeholder","onChange","event","value","ResultsBlock","header","content","headerHtml","addressesHtml","map","entry","title","address","Results","data","id","s","loadData","a","loadJson","json","result","parseData","Promise","resolve","$","getJSON","name","results","topCategory","topCategoryContent","category","categoryName","alternativeTitles","categoryContent","push","Main","useState","setQuery","allData","setAllData","displayData","setDisplayData","useEffect","load","filtered","toLowerCase","replace","forEach","matchingEntries","filter","includes","length","resultsNode","isEmptyObject","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffc24fd0.chunk.js","sourcesContent":["import React, { ReactElement } from 'react'\r\n\r\nfunction MapLink(): ReactElement {\r\n    return (\r\n        <div className=\"st-twins-header-1 is-size-5 is-uppercase\">\r\n            <a href=\"https://cdn.sttwins.com/static/book/map.pdf\" target=\"_blank\" className=\"has-text-white\">Карта города</a>\r\n            <hr className=\"st-twins-line is-paddingless is-marginless\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapLink\r\n","import React, { ReactElement, useCallback } from 'react'\r\nimport debounce from \"debounce\";\r\n\r\ninterface Props {\r\n    queryUpdated: (query: string) => void;\r\n}\r\n\r\n// add update prop changed\r\n\r\nfunction SearchBar({queryUpdated}: Props): ReactElement {\r\n    const setQueryValue = useCallback(\r\n        debounce((query: any) => queryUpdated(query), 500),\r\n        []\r\n      );\r\n\r\n    return (\r\n        <div className=\"field\">\r\n            <input className=\"input is-success\" type=\"search\" placeholder=\"Поиск\" onChange={event => setQueryValue(event.target.value)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar\r\n","import React, { ReactElement } from 'react'\r\nimport {Category} from '../../types'\r\n\r\n\r\nfunction ResultsBlock({ header, content }: Category): ReactElement {\r\n\r\n    const headerHtml = header ? <h2>{header}</h2> : null;\r\n\r\n    const addressesHtml = content.map(entry => {\r\n        return (\r\n            <div className=\"f-row\">\r\n                <div className=\"f-title\">{entry.title}</div>\r\n                <div className=\"f-right\">\r\n                    <div className=\"f-dots\">&nbsp;</div>\r\n                    <div className=\"f-address\">{entry.address}</div>\r\n                </div>\r\n            </div>)\r\n    })\r\n\r\n    return (\r\n        <>\r\n            {headerHtml}\r\n            {addressesHtml}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ResultsBlock\r\n","import React, { ReactElement } from 'react'\r\nimport ResultsBlock from './ResultsBlock'\r\nimport {Category} from '../../types'\r\n\r\n\r\ninterface Props {\r\n    data: Category[]\r\n}\r\n\r\nfunction Results({ data }: Props): ReactElement {\r\n    return (\r\n        <div className=\"column addresses\" id=\"addresses\">\r\n            {data.map(s => <ResultsBlock {...s}></ResultsBlock>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Results\r\n","import $ from \"jquery\"\r\nimport {Category} from '../types'\r\n\r\n\r\nexport function filter(data: Category[], query: string): Category[] {\r\n    if (!query)\r\n        return data;\r\n\r\n    query = query.toLowerCase().replace('-', '');\r\n    \r\n    if (!query)\r\n        return data;\r\n\r\n    const results: Category[] = [];\r\n\r\n    data.forEach(category => {\r\n        const matchingEntries = category.content.filter(entry => {\r\n            const title = entry.title.toLowerCase();\r\n            const address = entry.address.toLowerCase().replace('-', '');\r\n\r\n            return title.includes(query) || address.includes(query);\r\n        });\r\n\r\n        if (matchingEntries.length > 0)\r\n            results.push({header: category.header, content: matchingEntries});\r\n    });\r\n\r\n    return results;\r\n}\r\n\r\nexport const loadData = async () : Promise<Category[]> => {\r\n    let json = await loadJson();\r\n    const result = parseData(json);\r\n\r\n    return result;\r\n}\r\n\r\nconst loadJson = async () => {\r\n    return new Promise<string>(resolve => {\r\n        $.getJSON(\"data.json\", resolve)\r\n    });\r\n}\r\n\r\nfunction parseData(json: any): Category[] {\r\n    const results = [];\r\n\r\n    for (const topCategory in json) {\r\n        const topCategoryContent = json[topCategory];\r\n        for (const category in topCategoryContent) {\r\n            const categoryName = getCategoryName(category !== 'null' ? category : topCategory);\r\n            const categoryContent = topCategoryContent[category];\r\n\r\n            results.push({ header: categoryName, content: categoryContent })\r\n        }\r\n    }\r\n\r\n    return results;\r\n}\r\n\r\nconst alternativeTitles: { [key: string]: string; }  = \r\n{\r\n    'ПРЕДПРИЯТИЯ': 'УЧРЕЖДЕНИЯ',\r\n    'СРЕДСТВА МАССОВОЙ ИНФОРМАЦИИ': 'СМИ',\r\n    'КОММУНАЛЬНЫЕ СЛУЖБЫ': 'КОМ. СЛУЖБЫ',\r\n    'ФИНАНСОВЫЕ УЧРЕЖДЕНИЯ': 'ФИН. УЧРЕЖДЕНИЯ',\r\n};\r\n\r\nfunction getCategoryName(name: string): string {\r\n    return alternativeTitles[name] || name;\r\n}","import React, { ReactElement, useState, useEffect } from 'react'\r\nimport MapLink from './MapLink'\r\nimport SearchBar from './SearchBar'\r\nimport Results from './results'\r\nimport { loadData, filter } from '../data'\r\nimport $ from 'jquery'\r\nimport { Category } from '../types'\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nfunction Main(): ReactElement {\r\n    const [query, setQuery] = useState(\"\");\r\n    const [allData, setAllData] = useState<Category[]>([])\r\n    const [displayData, setDisplayData] = useState<Category[]>([])\r\n\r\n    useEffect(() => {\r\n        const load = async () => {\r\n            const data = await loadData();\r\n            setAllData(data);\r\n        }\r\n        load();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const filtered = filter(allData, query);\r\n        setDisplayData(filtered);\r\n    }, [query, allData])\r\n\r\n\r\n    const resultsNode = $.isEmptyObject(displayData)\r\n        ? <h1>no results</h1>\r\n        : <Results data={displayData} />\r\n\r\n    return (\r\n        <section className=\"hero is-fullheight\">\r\n            <h1 className=\"address-book title is-size-3 has-text-white is-uppercase has-text-weight-bold has-text-centered\">Адресная книга Сейнт-Твинс</h1>\r\n            <section className=\"address-book-section hero-body\">\r\n                <div className=\"container is-widescreen\">\r\n                    <div className=\"columns has-text-white\">\r\n                        <div className=\"column is-one-quarter is-narrow-mobile\">\r\n                            <SearchBar queryUpdated={setQuery} />\r\n                            <MapLink />\r\n                        </div>\r\n                        {resultsNode}\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Main\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from './components/Main';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}